import { inject, cloneVNode, defineComponent, computed, unref } from 'vue';
import { filterEmpty, getComponentFromSetup } from '../_util/props-util';
import warning from '../_util/warning';
import { defaultConfigProvider, ConfigConsumerProps } from '../config-provider';
import BreadcrumbItem from './BreadcrumbItem';
import Menu from '../menu';
import { breadcrumbProps } from './breadcrumbProps';
import {
  BreadcrumbProps,
  GenForRoutesParams,
  ItemRenderParams,
  RouteItem,
  VNodeElement,
} from './breadcrumbTypes';

function getBreadcrumbName(route: RouteItem, params: any): string | null {
  if (!route.breadcrumbName) {
    return null;
  }
  const paramsKeys = Object.keys(params).join('|');
  const name = route.breadcrumbName.replace(
    new RegExp(`:(${paramsKeys})`, 'g'),
    (replacement: string, key: string) => params[key] || replacement,
  );
  return name;
}

export default defineComponent({
  name: 'ABreadcrumb',
  props: breadcrumbProps,
  setup(propsValues, { slots, attrs }) {
    const propsRef = computed(() => {
      return { ...attrs, ...propsValues } as BreadcrumbProps;
    });
    const { getPrefixCls } = inject<ConfigConsumerProps>('configProvider', defaultConfigProvider);

    function defaultItemRender({ route, params, routes, paths }: ItemRenderParams) {
      const isLastItem = routes.indexOf(route) === routes.length - 1;
      const name = getBreadcrumbName(route, params);
      return isLastItem ? <span>{name}</span> : <a href={`#/${paths.join('/')}`}>{name}</a>;
    }

    function getPath(path: string, params: any): string {
      path = (path || '').replace(/^\//, '');
      Object.keys(params).forEach(key => {
        path = path.replace(`:${key}`, params[key]);
      });
      return path;
    }

    function addChildPath(paths: string[], childPath: string, params: any) {
      const originalPaths: string[] = [...paths];
      const path = getPath(childPath, params);
      if (path) {
        originalPaths.push(path);
      }
      return originalPaths;
    }


    function genForRoutes({
      routes = [],
      params = {},
      separator,
      itemRender = defaultItemRender,
    }: GenForRoutesParams) {
      const paths: string[] = [];
      return routes.map((route: any) => {
        const path = getPath(route.path, params);

        if (path) {
          paths.push(path);
        }
        const tempPaths = [...paths];
        // generated overlay by route.children
        let overlay: any = null;
        if (route.children && route.children.length) {
          overlay = (
            <Menu>
              {route.children.map(child => (
                <Menu.Item key={child.path || child.breadcrumbName}>
                  {itemRender({
                    route: child,
                    params,
                    routes,
                    paths: addChildPath(tempPaths, child.path, params),
                  })}
                </Menu.Item>
              ))}
            </Menu>
          );
        }

        return (
          <BreadcrumbItem
            overlay={overlay}
            separator={separator}
            key={path || route.breadcrumbName}
          >
            {itemRender({ route, params, routes, paths: tempPaths })}
          </BreadcrumbItem>
        );
      });
    }

    return () => {
      const props = unref(propsRef);
      let crumbs;
      const { prefixCls: customizePrefixCls, routes, params = {} } = props;
      const prefixCls = getPrefixCls('breadcrumb', customizePrefixCls);

      const children = filterEmpty(slots.default?.());
      const separator =
        slots.separator?.() || (getComponentFromSetup(props, slots, 'separator') as VNodeElement);
      const itemRender = props.itemRender || slots.itemRender || defaultItemRender;
      if (routes && routes.length > 0) {
        // generated by route
        crumbs = genForRoutes({
          routes,
          params,
          separator,
          itemRender,
        });
      } else if (children.length) {
        crumbs = children.map((element, index) => {
          warning(
            typeof element.type === 'object' &&
              (element.type.__ANT_BREADCRUMB_ITEM || element.type.__ANT_BREADCRUMB_SEPARATOR),
            'Breadcrumb',
            "Only accepts Breadcrumb.Item and Breadcrumb.Separator as it's children",
          );
          return cloneVNode(element, { separator, key: index });
        });
      }
      return <div class={prefixCls}>{crumbs}</div>;
    };
  },
});
